/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/styles/index.scss":
/*!*******************************!*\
  !*** ./src/styles/index.scss ***!
  \*******************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
!function() {
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _styles_index_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./styles/index.scss */ "./src/styles/index.scss");

d3.select('h1').style('font-size', '5rem');
var quotes = {
  "Jon Kabat-Zinn": ["The little things? The little moments? They aren’t little.", "Wherever you go, there you are.", "Mindfulness is a way of befriending ourselves and our experience.", "The best way to capture moments is to pay attention. This is how we cultivate  mindfulness.", "Mindfulness means being awake. It means knowing what you are doing.", "You can’t stop the waves, but you can learn to surf."],
  "Thích Nhất Hạnh": ["To think in terms of either pessimism or optimism oversimplifies the truth. The problem is to see reality as it is.", "Many people are alive but don’t touch the miracle of being alive.", "The present moment is the only time over which we have dominion.", "The feeling that any task is a nuisance will soon disappear if it is done in mindfulness.", "Meditation is not evasion; it is a serene encounter with reality."],
  "Jack Kornfield": ["When we get too caught up in the busyness of the world, we lose connection with one another – and ourselves.", "Everything that has a beginning has an ending. Make your peace with that and all will be well.", "Wisdom says we are nothing. Love says we are everything. Between these two our life flows.", "The things that matter most in our lives are not fantastic or grand. They are moments when we touch one another.", "Much of spiritual life is self-acceptance, maybe all of it."],
  "Pema Chödrön": ["You are the sky. Everything else is just the weather.", "Fear is a natural reaction to moving closer to the truth.", "Nothing ever goes away until it has taught us what we need to know.", "The essence of bravery is being without self-deception.", "Meditation practice isn’t about trying to throw ourselves away and become something better. It’s about befriending who we are already.", "Rejoicing in ordinary things is not sentimental or trite. It actually takes guts."],
  "Chögyam Trungpa": ["Altogether, the idea of meditation is not to create states of ecstasy or absorption, but to experience being."],
  "Sharon Salzberg": ["Mindfulness isn’t difficult, we just need to remember to do it.", "That’s life: starting over, one breath at a time.", "It is never too late to turn on the light."],
  "Allan Lokos": ["You cannot control the results, only your actions.", "Don’t believe everything you think. Thoughts are just that – thoughts.", "Your actions are your only true belongings.", "The art of peaceful living comes down to living compassionately & wisely.", "We cannot force the development of mindfulness."],
  "Buddha": ["The Way is not in the sky, the Way is in the heart.", "You only lose what you cling to.", "Peace comes from within. Do not seek it without.", "Three things can not hide for long: the Moon, the Sun and the Truth.", "Nothing can harm you as much as your own thoughts unguarded.", "Attachment leads to suffering.", "Nothing is forever except change.", "Just as a snake sheds its skin, we must shed our past over and over again.", "Every experience, no matter how bad it seems, holds within it a blessing of some kind. The goal is to find it.", "Our life is shaped by our mind, for we become what we think.", "With our thoughts we make the world.", "Be where you are, otherwise you will miss your life.", "If the problem can be solved why worry? If the problem cannot be solved worrying will do you no good.", "Do not dwell in the past, do not dream of the future, concentrate the mind on the present moment.", "If you are facing in the right direction, all you need to do is keep on walking.", "Every morning we are born again. What we do today is what matters most."]
};
var authors = Object.keys(quotes);
var zenColors = ["#c3d3b2", "#a1b88d", "#b3c6a3", "#dad2ba", "#b3c6a3", "#c6d4ba", "#d0dbc6", "#d9e2d1", "#e2e9dc", "#ecf0e8"];
d3.select('#quote-btn').on('click', function () {
  var randAuth = authors[Math.floor(Math.random() * authors.length)];
  var randQuote = quotes[randAuth][Math.floor(Math.random() * quotes[randAuth].length)];
  var randColor = zenColors[Math.floor(Math.random() * zenColors.length)];
  d3.select('#quote-text').text(randQuote);
  d3.select('.mb-author').text(randAuth);
  console.log(randColor);
  d3.select('body').style('background-color', randColor);
});
var audio_info = document.getElementById('audio1');
document.getElementById('pause-play').addEventListener('click', function (e) {
  if (audio_info.paused) {
    audio_info.play();
    e.target.classList.toggle('fa-volume-off');
    e.target.classList.toggle('fa-volume-up');
  } else {
    audio_info.pause();
    e.target.classList.toggle('fa-volume-up');
    e.target.classList.toggle('fa-volume-off');
  }
}, false);
var width = 450;
var height = 450;
var margin = 40;
var radius = Math.min(width, height) / 2 - margin;
var svg = d3.select(".meditate-circle").append("svg").attr("width", width).attr("height", height).append("g").attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");
var data = {
  a: 14,
  b: 86
};
var color = d3.scaleOrdinal().domain(data).range(['#ffd384', '#94ebcd']);
var pie = d3.pie().value(function (d) {
  return d.value;
});
var data_ready = pie(d3.entries(data));
svg.selectAll('filler').data(data_ready).enter().append('path').attr('d', d3.arc().innerRadius(120).outerRadius(radius)).attr('fill', function (d) {
  return color(d.data.key);
}).attr("stroke", "black").attr("class", "circle").on('click', function (d) {
  window.location.href = "https://www.thegoodbody.com/meditation-statistics/";
}).style("stroke-width", "2px").style("opacity", 0.7);
d3.select('g').append("text").attr("text-anchor", "middle").attr('font-size', '1em').attr('y', -60).text('More than');
d3.select('g').append("text").attr("text-anchor", "middle").attr('font-size', '4em').attr('y', 10).text('14%');
d3.select('g').append('text').attr('text-anchor', 'middle').attr('y', 40).attr('font-size', '1em').text("of people in the US have");
d3.select('g').append('text').attr('text-anchor', 'middle').attr('y', 60).attr('font-size', '1em').text(" practiced meditation");
var ageMargin = {
  top: 10,
  right: 30,
  bottom: 90,
  left: 40
};
var ageWidth = 460 - ageMargin.left - ageMargin.right;
var ageHeight = 450 - ageMargin.top - ageMargin.bottom;
var ageSvg = d3.select(".age-div").append("svg").attr("width", ageWidth + ageMargin.left + ageMargin.right).attr("height", ageHeight + ageMargin.top + ageMargin.bottom).append("g").attr("transform", "translate(" + ageMargin.left + "," + ageMargin.top + ")");
d3.csv("src/assets/data/age.csv", function (ageData) {
  console.log(ageData);
  var x = d3.scaleBand().range([0, ageWidth]).domain(ageData.map(function (d) {
    return d.Age;
  })).padding(0.2);
  ageSvg.append("g").attr("transform", "translate(0," + ageHeight + ")").call(d3.axisBottom(x)).selectAll("text").attr("transform", "translate(-10,0)rotate(-45)").style("text-anchor", "end");
  var y = d3.scaleLinear().domain([0, 20]).range([ageHeight, 0]);
  ageSvg.append("g").call(d3.axisLeft(y));
  ageSvg.selectAll().data(ageData).enter().append("rect").attr("x", function (d) {
    return x(d.Age);
  }).attr("width", x.bandwidth()).attr("fill", "#94ebcd").attr("stroke", "black").attr("height", function (d) {
    return ageHeight - y(0);
  }).attr("y", function (d) {
    return y(0);
  }).on("mouseover", function (d, i) {
    d3.select(".age-text").text("of people aged ".concat(d.Age, " practice meditation"));
    d3.select(".age-percentage").text("".concat(d.Value, "%"));
  });
  ageSvg.selectAll("rect").transition().duration(800).attr("y", function (d) {
    return y(d.Value);
  }).attr("height", function (d) {
    return ageHeight - y(d.Value);
  }).delay(function (d, i) {
    console.log(i);
    return i * 100;
  });
});
var benMargin = {
  top: 10,
  right: 10,
  bottom: 10,
  left: 10
};
var benWidth = 445 - benMargin.left - benMargin.right;
var benHeight = 445 - benMargin.top - benMargin.bottom;
var benSvg = d3.select(".benefits-graph").append("svg").attr("width", benWidth + benMargin.left + benMargin.right).attr("height", benHeight + benMargin.top + benMargin.bottom).append("g").attr("transform", "translate(" + benMargin.left + "," + benMargin.top + ")");
d3.csv("src/assets/data/benefits.csv", function (benData) {
  var root = d3.stratify().id(function (d) {
    return d.name;
  }).parentId(function (d) {
    return d.parent;
  })(benData);
  root.sum(function (d) {
    return +d.value;
  });
  d3.treemap().size([benWidth, benHeight]).padding(4)(root);
  console.log(root.leaves());

  function handleMouseOver(d, i) {
    console.log(d);
    console.log(this);

    if (d3.select(this).style('fill') === 'orange') {
      d3.select(this).style('fill', 'rgb(105, 179, 162)');
    } else {
      d3.select(this).style("fill", "orange");
    }

    d3.select(".benefits-percent").text("".concat(d.data.value, "%"));
    d3.select(".benefits-text").text("of people between reported that meditation helped with ".concat(d.data.name)).data(root.leaves()).enter().attr("id", function (d) {
      return "t" + d.x + "-" + d.y + i;
    }).attr("x", function (d) {
      return d.x0 + 5;
    }).attr("y", function (d) {
      return d.y0 + 20;
    }).text(function (d) {
      return "".concat(d.data.name, ": ").concat(d.data.value, "%");
    }).attr("font-size", "15px").attr("fill", "white").attr("font-family", "'Oswald', sans-serif;");
  }

  benSvg.selectAll("rect").data(root.leaves()).enter().append("rect").attr('x', function (d) {
    return d.x0;
  }).attr('y', function (d) {
    return d.y0;
  }).attr('width', function (d) {
    return d.x1 - d.x0;
  }).attr('height', function (d) {
    return d.y1 - d.y0;
  }).style("stroke", "black").style("fill", "#69b3a2").on("mouseover", handleMouseOver).on("click", function (d) {
    return window.open("https://www.youtube.com/results?search_query=meditation+for+".concat(d.data.name), '_blank');
  }); // .on("mouseout", handleMouseOut);

  benSvg.selectAll("text").data(root.leaves()).enter().append("text").attr("x", function (d) {
    return d.x0 + 5;
  }).attr("y", function (d) {
    return d.y0 + 20;
  }).text(function (d) {
    return "".concat(d.data.name, ": ").concat(d.data.value, "%");
  }).attr("font-size", "15px").attr("fill", "white").attr("font-family", "'Oswald', sans-serif;");
});
}();
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb25zY2lvdXMtanMvLi9zcmMvc3R5bGVzL2luZGV4LnNjc3MiLCJ3ZWJwYWNrOi8vY29uc2Npb3VzLWpzL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2NvbnNjaW91cy1qcy93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL2NvbnNjaW91cy1qcy8uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJkMyIsInNlbGVjdCIsInN0eWxlIiwicXVvdGVzIiwiYXV0aG9ycyIsIk9iamVjdCIsImtleXMiLCJ6ZW5Db2xvcnMiLCJvbiIsInJhbmRBdXRoIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwibGVuZ3RoIiwicmFuZFF1b3RlIiwicmFuZENvbG9yIiwidGV4dCIsImNvbnNvbGUiLCJsb2ciLCJhdWRpb19pbmZvIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwicGF1c2VkIiwicGxheSIsInRhcmdldCIsImNsYXNzTGlzdCIsInRvZ2dsZSIsInBhdXNlIiwid2lkdGgiLCJoZWlnaHQiLCJtYXJnaW4iLCJyYWRpdXMiLCJtaW4iLCJzdmciLCJhcHBlbmQiLCJhdHRyIiwiZGF0YSIsImEiLCJiIiwiY29sb3IiLCJzY2FsZU9yZGluYWwiLCJkb21haW4iLCJyYW5nZSIsInBpZSIsInZhbHVlIiwiZCIsImRhdGFfcmVhZHkiLCJlbnRyaWVzIiwic2VsZWN0QWxsIiwiZW50ZXIiLCJhcmMiLCJpbm5lclJhZGl1cyIsIm91dGVyUmFkaXVzIiwia2V5Iiwid2luZG93IiwibG9jYXRpb24iLCJocmVmIiwiYWdlTWFyZ2luIiwidG9wIiwicmlnaHQiLCJib3R0b20iLCJsZWZ0IiwiYWdlV2lkdGgiLCJhZ2VIZWlnaHQiLCJhZ2VTdmciLCJjc3YiLCJhZ2VEYXRhIiwieCIsInNjYWxlQmFuZCIsIm1hcCIsIkFnZSIsInBhZGRpbmciLCJjYWxsIiwiYXhpc0JvdHRvbSIsInkiLCJzY2FsZUxpbmVhciIsImF4aXNMZWZ0IiwiYmFuZHdpZHRoIiwiaSIsIlZhbHVlIiwidHJhbnNpdGlvbiIsImR1cmF0aW9uIiwiZGVsYXkiLCJiZW5NYXJnaW4iLCJiZW5XaWR0aCIsImJlbkhlaWdodCIsImJlblN2ZyIsImJlbkRhdGEiLCJyb290Iiwic3RyYXRpZnkiLCJpZCIsIm5hbWUiLCJwYXJlbnRJZCIsInBhcmVudCIsInN1bSIsInRyZWVtYXAiLCJzaXplIiwibGVhdmVzIiwiaGFuZGxlTW91c2VPdmVyIiwieDAiLCJ5MCIsIngxIiwieTEiLCJvcGVuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOzs7Ozs7O1VDQUE7VUFDQTs7VUFFQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTs7VUFFQTtVQUNBOztVQUVBO1VBQ0E7VUFDQTs7Ozs7V0N0QkE7V0FDQTtXQUNBO1dBQ0Esc0RBQXNELGtCQUFrQjtXQUN4RTtXQUNBLCtDQUErQyxjQUFjO1dBQzdELEU7Ozs7Ozs7Ozs7OztBQ05BO0FBRUFBLEVBQUUsQ0FBQ0MsTUFBSCxDQUFVLElBQVYsRUFBZ0JDLEtBQWhCLENBQXNCLFdBQXRCLEVBQW1DLE1BQW5DO0FBR0EsSUFBTUMsTUFBTSxHQUFHO0FBQ2Isb0JBQ0UsQ0FDRSw0REFERixFQUVFLGlDQUZGLEVBR0UsbUVBSEYsRUFJRSw2RkFKRixFQUtFLHFFQUxGLEVBTUUsc0RBTkYsQ0FGVztBQVViLHFCQUNFLENBQ0UscUhBREYsRUFFRSxtRUFGRixFQUdFLGtFQUhGLEVBSUUsMkZBSkYsRUFLRSxtRUFMRixDQVhXO0FBa0JiLG9CQUNFLENBQ0UsOEdBREYsRUFFRSxnR0FGRixFQUdFLDRGQUhGLEVBSUUsa0hBSkYsRUFLRSw2REFMRixDQW5CVztBQTBCYixrQkFDQSxDQUNFLHVEQURGLEVBRUUsMkRBRkYsRUFHRSxxRUFIRixFQUlFLHlEQUpGLEVBS0Usd0lBTEYsRUFNRSxtRkFORixDQTNCYTtBQW1D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RUFXS00sRUFYTCxDQVdRLFdBWFIsRUFXcUI0RixlQVhyQixFQVlLNUYsRUFaTCxDQVlRLE9BWlIsRUFZaUIsVUFBQ3VDLENBQUQsRUFBTztBQUFDLFdBQU9TLE1BQU0sQ0FBQ2lELElBQVAsdUVBQTJFMUQsQ0FBQyxDQUFDVCxJQUFGLENBQU91RCxJQUFsRixHQUEwRixRQUExRixDQUFQO0FBQTJHLEdBWnBJLEVBaEN1RCxDQTZDbkQ7O0FBSUpMLFFBQU0sQ0FDSHRDLFNBREgsQ0FDYSxNQURiLEVBRUdaLElBRkgsQ0FFUW9ELElBQUksQ0FBQ1MsTUFBTCxFQUZSLEVBR0doRCxLQUhILEdBSUdmLE1BSkgsQ0FJVSxNQUpWLEVBS0tDLElBTEwsQ0FLVSxHQUxWLEVBS2UsVUFBQVUsQ0FBQyxFQUFJO0FBQUUsV0FBT0EsQ0FBQyxDQUFDc0QsRUFBRixHQUFLLENBQVo7QUFBYyxHQUxwQyxFQU1LaEUsSUFOTCxDQU1VLEdBTlYsRUFNZSxVQUFBVSxDQUFDLEVBQUk7QUFBRSxXQUFPQSxDQUFDLENBQUN1RCxFQUFGLEdBQUssRUFBWjtBQUFlLEdBTnJDLEVBT0t0RixJQVBMLENBT1UsVUFBQStCLENBQUMsRUFBSTtBQUFFLHFCQUFVQSxDQUFDLENBQUNULElBQUYsQ0FBT3VELElBQWpCLGVBQTBCOUMsQ0FBQyxDQUFDVCxJQUFGLENBQU9RLEtBQWpDO0FBQTBDLEdBUDNELEVBUUtULElBUkwsQ0FRVSxXQVJWLEVBUXVCLE1BUnZCLEVBU0tBLElBVEwsQ0FTVSxNQVRWLEVBU2tCLE9BVGxCLEVBVUtBLElBVkwsQ0FVVSxhQVZWLEVBVXlCLHVCQVZ6QjtBQVlELENBN0RELEUiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsImltcG9ydCBcIi4vc3R5bGVzL2luZGV4LnNjc3NcIjtcblxuZDMuc2VsZWN0KCdoMScpLnN0eWxlKCdmb250LXNpemUnLCAnNXJlbScpXG5cblxuY29uc3QgcXVvdGVzID0ge1xuICBcIkpvbiBLYWJhdC1aaW5uXCI6IFxuICAgIFtcbiAgICAgIFwiVGhlIGxpdHRsZSB0aGluZ3M/IFRoZSBsaXR0bGUgbW9tZW50cz8gVGhleSBhcmVu4oCZdCBsaXR0bGUuXCIsXG4gICAgICBcIldoZXJldmVyIHlvdSBnbywgdGhlcmUgeW91IGFyZS5cIiwgXG4gICAgICBcIk1pbmRmdWxuZXNzIGlzIGEgd2F5IG9mIGJlZnJpZW5kaW5nIG91cnNlbHZlcyBhbmQgb3VyIGV4cGVyaWVuY2UuXCIsXG4gICAgICBcIlRoZSBiZXN0IHdheSB0byBjYXB0dXJlIG1vbWVudHMgaXMgdG8gcGF5IGF0dGVudGlvbi4gVGhpcyBpcyBob3cgd2UgY3VsdGl2YXRlICBtaW5kZnVsbmVzcy5cIixcbiAgICAgIFwiTWluZGZ1bG5lc3MgbWVhbnMgYmVpbmcgYXdha2UuIEl0IG1lYW5zIGtub3dpbmcgd2hhdCB5b3UgYXJlIGRvaW5nLlwiLFxuICAgICAgXCJZb3UgY2Fu4oCZdCBzdG9wIHRoZSB3YXZlcywgYnV0IHlvdSBjYW4gbGVhcm4gdG8gc3VyZi5cIlxuICAgIF0sXG4gIFwiVGjDrWNoIE5o4bqldCBI4bqhbmhcIjpcbiAgICBbXG4gICAgICBcIlRvIHRoaW5rIGluIHRlcm1zIG9mIGVpdGhlciBwZXNzaW1pc20gb3Igb3B0aW1pc20gb3ZlcnNpbXBsaWZpZXMgdGhlIHRydXRoLiBUaGUgcHJvYmxlbSBpcyB0byBzZWUgcmVhbGl0eSBhcyBpdCBpcy5cIixcbiAgICAgIFwiTWFueSBwZW9wbGUgYXJlIGFsaXZlIGJ1dCBkb27igJl0IHRvdWNoIHRoZSBtaXJhY2xlIG9mIGJlaW5nIGFsaXZlLlwiLFxuICAgICAgXCJUaGUgcHJlc2VudCBtb21lbnQgaXMgdGhlIG9ubHkgdGltZSBvdmVyIHdoaWNoIHdlIGhhdmUgZG9taW5pb24uXCIsXG4gICAgICBcIlRoZSBmZWVsaW5nIHRoYXQgYW55IHRhc2sgaXMgYSBudWlzYW5jZSB3aWxsIHNvb24gZGlzYXBwZWFyIGlmIGl0IGlzIGRvbmUgaW4gbWluZGZ1bG5lc3MuXCIsXG4gICAgICBcIk1lZGl0YXRpb24gaXMgbm90IGV2YXNpb247IGl0IGlzIGEgc2VyZW5lIGVuY291bnRlciB3aXRoIHJlYWxpdHkuXCJcbiAgICBdLFxuICBcIkphY2sgS29ybmZpZWxkXCI6XG4gICAgW1xuICAgICAgXCJXaGVuIHdlIGdldCB0b28gY2F1Z2h0IHVwIGluIHRoZSBidXN5bmVzcyBvZiB0aGUgd29ybGQsIHdlIGxvc2UgY29ubmVjdGlvbiB3aXRoIG9uZSBhbm90aGVyIOKAkyBhbmQgb3Vyc2VsdmVzLlwiLFxuICAgICAgXCJFdmVyeXRoaW5nIHRoYXQgaGFzIGEgYmVnaW5uaW5nIGhhcyBhbiBlbmRpbmcuIE1ha2UgeW91ciBwZWFjZSB3aXRoIHRoYXQgYW5kIGFsbCB3aWxsIGJlIHdlbGwuXCIsXG4gICAgICBcIldpc2RvbSBzYXlzIHdlIGFyZSBub3RoaW5nLiBMb3ZlIHNheXMgd2UgYXJlIGV2ZXJ5dGhpbmcuIEJldHdlZW4gdGhlc2UgdHdvIG91ciBsaWZlIGZsb3dzLlwiLFxuICAgICAgXCJUaGUgdGhpbmdzIHRoYXQgbWF0dGVyIG1vc3QgaW4gb3VyIGxpdmVzIGFyZSBub3QgZmFudGFzdGljIG9yIGdyYW5kLiBUaGV5IGFyZSBtb21lbnRzIHdoZW4gd2UgdG91Y2ggb25lIGFub3RoZXIuXCIsXG4gICAgICBcIk11Y2ggb2Ygc3Bpcml0dWFsIGxpZmUgaXMgc2VsZi1hY2NlcHRhbmNlLCBtYXliZSBhbGwgb2YgaXQuXCJcbiAgICBdLFxuICBcIlBlbWEgQ2jDtmRyw7ZuXCI6XG4gIFtcbiAgICBcIllvdSBhcmUgdGhlIHNreS4gRXZlcnl0aGluZyBlbHNlIGlzIGp1c3QgdGhlIHdlYXRoZXIuXCIsXG4gICAgXCJGZWFyIGlzIGEgbmF0dXJhbCByZWFjdGlvbiB0byBtb3ZpbmcgY2xvc2VyIHRvIHRoZSB0cnV0aC5cIixcbiAgICBcIk5vdGhpbmcgZXZlciBnb2VzIGF3YXkgdW50aWwgaXQgaGFzIHRhdWdodCB1cyB3aGF0IHdlIG5lZWQgdG8ga25vdy5cIixcbiAgICBcIlRoZSBlc3NlbmNlIG9mIGJyYXZlcnkgaXMgYmVpbmcgd2l0aG91dCBzZWxmLWRlY2VwdGlvbi5cIixcbiAgICBcIk1lZGl0YXRpb24gcHJhY3RpY2UgaXNu4oCZdCBhYm91dCB0cnlpbmcgdG8gdGhyb3cgb3Vyc2VsdmVzIGF3YXkgYW5kIGJlY29tZSBzb21ldGhpbmcgYmV0dGVyLiBJdOKAmXMgYWJvdXQgYmVmcmllbmRpbmcgd2hvIHdlIGFyZSBhbHJlYWR5LlwiLFxuICAgIFwiUmVqb2ljaW5nIGluIG9yZGluYXJ5IHRoaW5ncyBpcyBub3Qgc2VudGltZW50YWwgb3IgdHJpdGUuIEl0IGFjdHVhbGx5IHRha2VzIGd1dHMuXCJcbiAgXSxcbiAgXCJDaMO2Z3lhbSBUcnVuZ3BhXCI6XG4gIFtcbiAgICBcIkFsdG9nZXRoZXIsIHRoZSBpZGVhIG9mIG1lZGl0YXRpb24gaXMgbm90IHRvIGNyZWF0ZSBzdGF0ZXMgb2YgZWNzdGFzeSBvciBhYnNvcnB0aW9uLCBidXQgdG8gZXhwZXJpZW5jZSBiZWluZy5cIlxuICBdLFxuICBcIlNoYXJvbiBTYWx6YmVyZ1wiOlxuICBbXG4gICAgXCJNaW5kZnVsbmVzcyBpc27igJl0IGRpZmZpY3VsdCwgd2UganVzdCBuZWVkIHRvIHJlbWVtYmVyIHRvIGRvIGl0LlwiLFxuICAgIFwiVGhhdOKAmXMgbGlmZTogc3RhcnRpbmcgb3Zlciwgb25lIGJyZWF0aCBhdCBhIHRpbWUuXCIsXG4gICAgXCJJdCBpcyBuZXZlciB0b28gbGF0ZSB0byB0dXJuIG9uIHRoZSBsaWdodC5cIlxuICBdLFxuICBcIkFsbGFuIExva29zXCI6XG4gIFtcbiAgICBcIllvdSBjYW5ub3QgY29udHJvbCB0aGUgcmVzdWx0cywgb25seSB5b3VyIGFjdGlvbnMuXCIsXG4gICAgXCJEb27igJl0IGJlbGlldmUgZXZlcnl0aGluZyB5b3UgdGhpbmsuIFRob3VnaHRzIGFyZSBqdXN0IHRoYXQg4oCTIHRob3VnaHRzLlwiLFxuICAgIFwiWW91ciBhY3Rpb25zIGFyZSB5b3VyIG9ubHkgdHJ1ZSBiZWxvbmdpbmdzLlwiLFxuICAgIFwiVGhlIGFydCBvZiBwZWFjZWZ1bCBsaXZpbmcgY29tZXMgZG93biB0byBsaXZpbmcgY29tcGFzc2lvbmF0ZWx5ICYgd2lzZWx5LlwiLFxuICAgIFwiV2UgY2Fubm90IGZvcmNlIHRoZSBkZXZlbG9wbWVudCBvZiBtaW5kZnVsbmVzcy5cIlxuICBdLFxuICBcIkJ1ZGRoYVwiOlxuICBbXG4gICAgXCJUaGUgV2F5IGlzIG5vdCBpbiB0aGUgc2t5LCB0aGUgV2F5IGlzIGluIHRoZSBoZWFydC5cIixcbiAgICBcIllvdSBvbmx5IGxvc2Ugd2hhdCB5b3UgY2xpbmcgdG8uXCIsXG4gICAgXCJQZWFjZSBjb21lcyBmcm9tIHdpdGhpbi4gRG8gbm90IHNlZWsgaXQgd2l0aG91dC5cIixcbiAgICBcIlRocmVlIHRoaW5ncyBjYW4gbm90IGhpZGUgZm9yIGxvbmc6IHRoZSBNb29uLCB0aGUgU3VuIGFuZCB0aGUgVHJ1dGguXCIsXG4gICAgXCJOb3RoaW5nIGNhbiBoYXJtIHlvdSBhcyBtdWNoIGFzIHlvdXIgb3duIHRob3VnaHRzIHVuZ3VhcmRlZC5cIixcbiAgICBcIkF0dGFjaG1lbnQgbGVhZHMgdG8gc3VmZmVyaW5nLlwiLFxuICAgIFwiTm90aGluZyBpcyBmb3JldmVyIGV4Y2VwdCBjaGFuZ2UuXCIsXG4gICAgXCJKdXN0IGFzIGEgc25ha2Ugc2hlZHMgaXRzIHNraW4sIHdlIG11c3Qgc2hlZCBvdXIgcGFzdCBvdmVyIGFuZCBvdmVyIGFnYWluLlwiLFxuICAgIFwiRXZlcnkgZXhwZXJpZW5jZSwgbm8gbWF0dGVyIGhvdyBiYWQgaXQgc2VlbXMsIGhvbGRzIHdpdGhpbiBpdCBhIGJsZXNzaW5nIG9mIHNvbWUga2luZC4gVGhlIGdvYWwgaXMgdG8gZmluZCBpdC5cIixcbiAgICBcIk91ciBsaWZlIGlzIHNoYXBlZCBieSBvdXIgbWluZCwgZm9yIHdlIGJlY29tZSB3aGF0IHdlIHRoaW5rLlwiLFxuICAgIFwiV2l0aCBvdXIgdGhvdWdodHMgd2UgbWFrZSB0aGUgd29ybGQuXCIsXG4gICAgXCJCZSB3aGVyZSB5b3UgYXJlLCBvdGhlcndpc2UgeW91IHdpbGwgbWlzcyB5b3VyIGxpZmUuXCIsXG4gICAgXCJJZiB0aGUgcHJvYmxlbSBjYW4gYmUgc29sdmVkIHdoeSB3b3JyeT8gSWYgdGhlIHByb2JsZW0gY2Fubm90IGJlIHNvbHZlZCB3b3JyeWluZyB3aWxsIGRvIHlvdSBubyBnb29kLlwiLFxuICAgIFwiRG8gbm90IGR3ZWxsIGluIHRoZSBwYXN0LCBkbyBub3QgZHJlYW0gb2YgdGhlIGZ1dHVyZSwgY29uY2VudHJhdGUgdGhlIG1pbmQgb24gdGhlIHByZXNlbnQgbW9tZW50LlwiLFxuICAgIFwiSWYgeW91IGFyZSBmYWNpbmcgaW4gdGhlIHJpZ2h0IGRpcmVjdGlvbiwgYWxsIHlvdSBuZWVkIHRvIGRvIGlzIGtlZXAgb24gd2Fsa2luZy5cIixcbiAgICBcIkV2ZXJ5IG1vcm5pbmcgd2UgYXJlIGJvcm4gYWdhaW4uIFdoYXQgd2UgZG8gdG9kYXkgaXMgd2hhdCBtYXR0ZXJzIG1vc3QuXCJcbiAgXVxufVxuXG5jb25zdCBhdXRob3JzID0gT2JqZWN0LmtleXMocXVvdGVzKVxuXG5jb25zdCB6ZW5Db2xvcnMgPSBbXG4gIFwiI2MzZDNiMlwiLFxuICBcIiNhMWI4OGRcIixcbiAgXCIjYjNjNmEzXCIsXG4gIFwiI2RhZDJiYVwiLFxuICBcIiNiM2M2YTNcIixcbiAgXCIjYzZkNGJhXCIsXG4gIFwiI2QwZGJjNlwiLFxuICBcIiNkOWUyZDFcIixcbiAgXCIjZTJlOWRjXCIsXG4gIFwiI2VjZjBlOFwiXG5dXG5cbmQzLnNlbGVjdCgnI3F1b3RlLWJ0bicpXG4gICAgICAgIC5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBsZXQgcmFuZEF1dGggPSBhdXRob3JzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGF1dGhvcnMubGVuZ3RoKV1cbiAgICAgICAgICAgIGxldCByYW5kUXVvdGUgPSBxdW90ZXNbcmFuZEF1dGhdW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHF1b3Rlc1tyYW5kQXV0aF0ubGVuZ3RoKV1cbiAgICAgICAgICAgIGxldCByYW5kQ29sb3IgPSB6ZW5Db2xvcnNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogemVuQ29sb3JzLmxlbmd0aCldXG4gICAgICAgICAgICBkMy5zZWxlY3QoJyNxdW90ZS10ZXh0JykudGV4dChyYW5kUXVvdGUpXG4gICAgICAgICAgICBkMy5zZWxlY3QoJy5tYi1hdXRob3InKS50ZXh0KHJhbmRBdXRoKVxuICAgICAgICAgICAgY29uc29sZS5sb2cocmFuZENvbG9yKVxuICAgICAgICAgICAgZDMuc2VsZWN0KCdib2R5Jykuc3R5bGUoJ2JhY2tncm91bmQtY29sb3InLCByYW5kQ29sb3IpXG4gICAgICAgIH0pO1xuXG5sZXQgYXVkaW9faW5mbyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhdWRpbzEnKTtcbmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwYXVzZS1wbGF5JykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgIGlmIChhdWRpb19pbmZvLnBhdXNlZCkge1xuICAgICAgICBhdWRpb19pbmZvLnBsYXkoKTtcbiAgICAgICAgZS50YXJnZXQuY2xhc3NMaXN0LnRvZ2dsZSgnZmEtdm9sdW1lLW9mZicpXG4gICAgICAgIGUudGFyZ2V0LmNsYXNzTGlzdC50b2dnbGUoJ2ZhLXZvbHVtZS11cCcpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgYXVkaW9faW5mby5wYXVzZSgpO1xuICAgICAgICBlLnRhcmdldC5jbGFzc0xpc3QudG9nZ2xlKCdmYS12b2x1bWUtdXAnKVxuICAgICAgICBlLnRhcmdldC5jbGFzc0xpc3QudG9nZ2xlKCdmYS12b2x1bWUtb2ZmJylcbiAgICB9XG59LCBmYWxzZSk7XG5cbmNvbnN0IHdpZHRoID0gNDUwXG5jb25zdCBoZWlnaHQgPSA0NTBcbmNvbnN0IG1hcmdpbiA9IDQwXG5cbmNvbnN0IHJhZGl1cyA9IE1hdGgubWluKHdpZHRoLCBoZWlnaHQpIC8gMiAtIG1hcmdpblxuXG5jb25zdCBzdmcgPSBkMy5zZWxlY3QoXCIubWVkaXRhdGUtY2lyY2xlXCIpXG4gIC5hcHBlbmQoXCJzdmdcIilcbiAgICAuYXR0cihcIndpZHRoXCIsIHdpZHRoKVxuICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGhlaWdodClcbiAgLmFwcGVuZChcImdcIilcbiAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIHdpZHRoIC8gMiArIFwiLFwiICsgaGVpZ2h0IC8gMiArIFwiKVwiKTtcblxubGV0IGRhdGEgPSB7YTogMTQsIGI6IDg2fVxuXG5sZXQgY29sb3IgPSBkMy5zY2FsZU9yZGluYWwoKVxuICAuZG9tYWluKGRhdGEpXG4gIC5yYW5nZShbJyNmZmQzODQnLCcjOTRlYmNkJ10pXG5cbmxldCBwaWUgPSBkMy5waWUoKVxuICAudmFsdWUoZnVuY3Rpb24oZCkge3JldHVybiBkLnZhbHVlOyB9KVxubGV0IGRhdGFfcmVhZHkgPSBwaWUoZDMuZW50cmllcyhkYXRhKSlcblxuc3ZnXG4gIC5zZWxlY3RBbGwoJ2ZpbGxlcicpXG4gIC5kYXRhKGRhdGFfcmVhZHkpXG4gIC5lbnRlcigpXG4gIC5hcHBlbmQoJ3BhdGgnKVxuICAuYXR0cignZCcsIGQzLmFyYygpXG4gICAgLmlubmVyUmFkaXVzKDEyMCkgICAgICAgICBcbiAgICAub3V0ZXJSYWRpdXMocmFkaXVzKVxuICApXG4gIC5hdHRyKCdmaWxsJywgZnVuY3Rpb24oZCl7IHJldHVybihjb2xvcihkLmRhdGEua2V5KSkgfSlcbiAgLmF0dHIoXCJzdHJva2VcIiwgXCJibGFja1wiKVxuICAuYXR0cihcImNsYXNzXCIsIFwiY2lyY2xlXCIpXG4gIC5vbignY2xpY2snLCBmdW5jdGlvbihkKSB7XG4gICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBcImh0dHBzOi8vd3d3LnRoZWdvb2Rib2R5LmNvbS9tZWRpdGF0aW9uLXN0YXRpc3RpY3MvXCJcbiAgfSlcbiAgLnN0eWxlKFwic3Ryb2tlLXdpZHRoXCIsIFwiMnB4XCIpXG4gIC5zdHlsZShcIm9wYWNpdHlcIiwgMC43KVxuXG4gIGQzLnNlbGVjdCgnZycpXG4gICAgLmFwcGVuZChcInRleHRcIilcblx0ICAuYXR0cihcInRleHQtYW5jaG9yXCIsIFwibWlkZGxlXCIpXG4gICAgLmF0dHIoJ2ZvbnQtc2l6ZScsICcxZW0nKVxuICAgIC5hdHRyKCd5JywgLTYwKVxuXHQgIC50ZXh0KCdNb3JlIHRoYW4nKTtcbiAgZDMuc2VsZWN0KCdnJylcbiAgICAuYXBwZW5kKFwidGV4dFwiKVxuXHQgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgXCJtaWRkbGVcIilcbiAgICAuYXR0cignZm9udC1zaXplJywgJzRlbScpXG4gICAgLmF0dHIoJ3knLCAxMClcblx0ICAudGV4dCgnMTQlJyk7XG4gIGQzLnNlbGVjdCgnZycpXG4gICAgLmFwcGVuZCgndGV4dCcpXG4gICAgLmF0dHIoJ3RleHQtYW5jaG9yJywgJ21pZGRsZScpXG4gICAgLmF0dHIoJ3knLCA0MClcbiAgICAuYXR0cignZm9udC1zaXplJywgJzFlbScpXG4gICAgLnRleHQoXCJvZiBwZW9wbGUgaW4gdGhlIFVTIGhhdmVcIilcbiAgZDMuc2VsZWN0KCdnJylcbiAgICAuYXBwZW5kKCd0ZXh0JylcbiAgICAuYXR0cigndGV4dC1hbmNob3InLCAnbWlkZGxlJylcbiAgICAuYXR0cigneScsIDYwKVxuICAgIC5hdHRyKCdmb250LXNpemUnLCAnMWVtJylcbiAgICAudGV4dChcIiBwcmFjdGljZWQgbWVkaXRhdGlvblwiKVxuXG5cbmNvbnN0IGFnZU1hcmdpbiA9IHt0b3A6IDEwLCByaWdodDogMzAsIGJvdHRvbTogOTAsIGxlZnQ6IDQwfTtcbmNvbnN0IGFnZVdpZHRoID0gNDYwIC0gYWdlTWFyZ2luLmxlZnQgLSBhZ2VNYXJnaW4ucmlnaHQ7XG5jb25zdCBhZ2VIZWlnaHQgPSA0NTAgLSBhZ2VNYXJnaW4udG9wIC0gYWdlTWFyZ2luLmJvdHRvbTtcblxubGV0IGFnZVN2ZyA9IGQzLnNlbGVjdChcIi5hZ2UtZGl2XCIpXG4gIC5hcHBlbmQoXCJzdmdcIilcbiAgICAuYXR0cihcIndpZHRoXCIsIGFnZVdpZHRoICsgYWdlTWFyZ2luLmxlZnQgKyBhZ2VNYXJnaW4ucmlnaHQpXG4gICAgLmF0dHIoXCJoZWlnaHRcIiwgYWdlSGVpZ2h0ICsgYWdlTWFyZ2luLnRvcCArIGFnZU1hcmdpbi5ib3R0b20pXG4gIC5hcHBlbmQoXCJnXCIpXG4gICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIixcbiAgICAgICAgICBcInRyYW5zbGF0ZShcIiArIGFnZU1hcmdpbi5sZWZ0ICsgXCIsXCIgKyBhZ2VNYXJnaW4udG9wICsgXCIpXCIpO1xuXG5cbmQzLmNzdihcInNyYy9hc3NldHMvZGF0YS9hZ2UuY3N2XCIsIGFnZURhdGEgPT4ge1xuY29uc29sZS5sb2coYWdlRGF0YSlcblxubGV0IHggPSBkMy5zY2FsZUJhbmQoKVxuICAucmFuZ2UoWyAwLCBhZ2VXaWR0aCBdKVxuICAuZG9tYWluKGFnZURhdGEubWFwKGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQuQWdlOyB9KSlcbiAgLnBhZGRpbmcoMC4yKTtcbmFnZVN2Zy5hcHBlbmQoXCJnXCIpXG4gIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKDAsXCIgKyBhZ2VIZWlnaHQgKyBcIilcIilcbiAgLmNhbGwoZDMuYXhpc0JvdHRvbSh4KSlcbiAgLnNlbGVjdEFsbChcInRleHRcIilcbiAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgtMTAsMClyb3RhdGUoLTQ1KVwiKVxuICAgIC5zdHlsZShcInRleHQtYW5jaG9yXCIsIFwiZW5kXCIpO1xuXG5sZXQgeSA9IGQzLnNjYWxlTGluZWFyKClcbiAgLmRvbWFpbihbMCwgMjBdKVxuICAucmFuZ2UoWyBhZ2VIZWlnaHQsIDBdKTtcbmFnZVN2Zy5hcHBlbmQoXCJnXCIpXG4gIC5jYWxsKGQzLmF4aXNMZWZ0KHkpKTtcblxuYWdlU3ZnLnNlbGVjdEFsbCgpXG4gIC5kYXRhKGFnZURhdGEpXG4gIC5lbnRlcigpXG4gIC5hcHBlbmQoXCJyZWN0XCIpXG4gICAgLmF0dHIoXCJ4XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIHgoZC5BZ2UpOyB9KVxuICAgIC5hdHRyKFwid2lkdGhcIiwgeC5iYW5kd2lkdGgoKSlcbiAgICAuYXR0cihcImZpbGxcIiwgXCIjOTRlYmNkXCIpXG4gICAgLmF0dHIoXCJzdHJva2VcIiwgXCJibGFja1wiKVxuICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGFnZUhlaWdodCAtIHkoMCk7IH0pXG4gICAgLmF0dHIoXCJ5XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIHkoMCk7IH0pXG4gICAgLm9uKFwibW91c2VvdmVyXCIsIChkLCBpKSA9PiB7XG4gICAgZDMuc2VsZWN0KFwiLmFnZS10ZXh0XCIpLnRleHQoYG9mIHBlb3BsZSBhZ2VkICR7ZC5BZ2V9IHByYWN0aWNlIG1lZGl0YXRpb25gKVxuICAgIGQzLnNlbGVjdChcIi5hZ2UtcGVyY2VudGFnZVwiKS50ZXh0KGAke2QuVmFsdWV9JWApXG4gIH0pXG5cbmFnZVN2Zy5zZWxlY3RBbGwoXCJyZWN0XCIpXG4gIC50cmFuc2l0aW9uKClcbiAgLmR1cmF0aW9uKDgwMClcbiAgLmF0dHIoXCJ5XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIHkoZC5WYWx1ZSk7IH0pXG4gIC5hdHRyKFwiaGVpZ2h0XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGFnZUhlaWdodCAtIHkoZC5WYWx1ZSk7IH0pXG4gIC5kZWxheShmdW5jdGlvbihkLGkpe2NvbnNvbGUubG9nKGkpIDsgcmV0dXJuKGkqMTAwKX0pXG5cbn0pXG5cblxuXG5cbmNvbnN0IGJlbk1hcmdpbiA9IHt0b3A6IDEwLCByaWdodDogMTAsIGJvdHRvbTogMTAsIGxlZnQ6IDEwfTtcbmNvbnN0IGJlbldpZHRoID0gNDQ1IC0gYmVuTWFyZ2luLmxlZnQgLSBiZW5NYXJnaW4ucmlnaHQ7XG5jb25zdCBiZW5IZWlnaHQgPSA0NDUgLSBiZW5NYXJnaW4udG9wIC0gYmVuTWFyZ2luLmJvdHRvbTtcblxubGV0IGJlblN2ZyA9IGQzLnNlbGVjdChcIi5iZW5lZml0cy1ncmFwaFwiKVxuLmFwcGVuZChcInN2Z1wiKVxuICAuYXR0cihcIndpZHRoXCIsIGJlbldpZHRoICsgYmVuTWFyZ2luLmxlZnQgKyBiZW5NYXJnaW4ucmlnaHQpXG4gIC5hdHRyKFwiaGVpZ2h0XCIsIGJlbkhlaWdodCArIGJlbk1hcmdpbi50b3AgKyBiZW5NYXJnaW4uYm90dG9tKVxuLmFwcGVuZChcImdcIilcbiAgLmF0dHIoXCJ0cmFuc2Zvcm1cIixcbiAgICAgICAgXCJ0cmFuc2xhdGUoXCIgKyBiZW5NYXJnaW4ubGVmdCArIFwiLFwiICsgYmVuTWFyZ2luLnRvcCArIFwiKVwiKTtcblxuZDMuY3N2KFwic3JjL2Fzc2V0cy9kYXRhL2JlbmVmaXRzLmNzdlwiLCBmdW5jdGlvbihiZW5EYXRhKSB7XG5cbiAgbGV0IHJvb3QgPSBkMy5zdHJhdGlmeSgpXG4gICAgLmlkKGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQubmFtZTt9KVxuICAgIC5wYXJlbnRJZChmdW5jdGlvbihkKSB7IHJldHVybiBkLnBhcmVudDsgfSlcbiAgICAoYmVuRGF0YSk7XG4gIHJvb3Quc3VtKGZ1bmN0aW9uKGQpIHsgcmV0dXJuICtkLnZhbHVlIH0pXG5cbiAgZDMudHJlZW1hcCgpXG4gICAgLnNpemUoW2JlbldpZHRoLCBiZW5IZWlnaHRdKVxuICAgIC5wYWRkaW5nKDQpXG4gICAgKHJvb3QpXG5cbmNvbnNvbGUubG9nKHJvb3QubGVhdmVzKCkpXG5cbiAgZnVuY3Rpb24gaGFuZGxlTW91c2VPdmVyKGQsIGkpIHtcbiAgICBjb25zb2xlLmxvZyhkKVxuICAgIGNvbnNvbGUubG9nKHRoaXMpXG4gICAgaWYgKGQzLnNlbGVjdCh0aGlzKS5zdHlsZSgnZmlsbCcpID09PSAnb3JhbmdlJykgeyBkMy5zZWxlY3QodGhpcykuc3R5bGUoJ2ZpbGwnLCAncmdiKDEwNSwgMTc5LCAxNjIpJyl9IGVsc2Uge2QzLnNlbGVjdCh0aGlzKS5zdHlsZShcImZpbGxcIiwgXCJvcmFuZ2VcIil9XG4gICAgZDMuc2VsZWN0KFwiLmJlbmVmaXRzLXBlcmNlbnRcIikudGV4dChgJHtkLmRhdGEudmFsdWV9JWApXG4gICAgZDMuc2VsZWN0KFwiLmJlbmVmaXRzLXRleHRcIikudGV4dChgb2YgcGVvcGxlIGJldHdlZW4gcmVwb3J0ZWQgdGhhdCBtZWRpdGF0aW9uIGhlbHBlZCB3aXRoICR7ZC5kYXRhLm5hbWV9YClcbiAgICAgIC5kYXRhKHJvb3QubGVhdmVzKCkpXG4gICAgICAuZW50ZXIoKVxuICAgICAgLmF0dHIoXCJpZFwiLCBkID0+IHsgcmV0dXJuIFwidFwiICsgZC54ICsgXCItXCIgKyBkLnkgKyBpIH0pXG4gICAgICAuYXR0cihcInhcIiwgZCA9PiB7IHJldHVybiBkLngwKzV9KVxuICAgICAgLmF0dHIoXCJ5XCIsIGQgPT4geyByZXR1cm4gZC55MCsyMH0pXG4gICAgICAudGV4dChkID0+IHsgcmV0dXJuIGAke2QuZGF0YS5uYW1lfTogJHtkLmRhdGEudmFsdWV9JWB9KVxuICAgICAgLmF0dHIoXCJmb250LXNpemVcIiwgXCIxNXB4XCIpXG4gICAgICAuYXR0cihcImZpbGxcIiwgXCJ3aGl0ZVwiKVxuICAgICAgLmF0dHIoXCJmb250LWZhbWlseVwiLCBcIidPc3dhbGQnLCBzYW5zLXNlcmlmO1wiKVxuICB9XG5cbiAgYmVuU3ZnXG4gICAgLnNlbGVjdEFsbChcInJlY3RcIilcbiAgICAuZGF0YShyb290LmxlYXZlcygpKVxuICAgIC5lbnRlcigpXG4gICAgLmFwcGVuZChcInJlY3RcIilcbiAgICAgIC5hdHRyKCd4JywgZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQueDA7IH0pXG4gICAgICAuYXR0cigneScsIGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLnkwOyB9KVxuICAgICAgLmF0dHIoJ3dpZHRoJywgZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQueDEgLSBkLngwOyB9KVxuICAgICAgLmF0dHIoJ2hlaWdodCcsIGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLnkxIC0gZC55MDsgfSlcbiAgICAgIC5zdHlsZShcInN0cm9rZVwiLCBcImJsYWNrXCIpXG4gICAgICAuc3R5bGUoXCJmaWxsXCIsIFwiIzY5YjNhMlwiKVxuICAgICAgLm9uKFwibW91c2VvdmVyXCIsIGhhbmRsZU1vdXNlT3ZlcilcbiAgICAgIC5vbihcImNsaWNrXCIsIChkKSA9PiB7cmV0dXJuIHdpbmRvdy5vcGVuKGBodHRwczovL3d3dy55b3V0dWJlLmNvbS9yZXN1bHRzP3NlYXJjaF9xdWVyeT1tZWRpdGF0aW9uK2Zvciske2QuZGF0YS5uYW1lfWAsICdfYmxhbmsnKX0pXG4gICAgICAvLyAub24oXCJtb3VzZW91dFwiLCBoYW5kbGVNb3VzZU91dCk7XG5cblxuXG4gIGJlblN2Z1xuICAgIC5zZWxlY3RBbGwoXCJ0ZXh0XCIpXG4gICAgLmRhdGEocm9vdC5sZWF2ZXMoKSlcbiAgICAuZW50ZXIoKVxuICAgIC5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAuYXR0cihcInhcIiwgZCA9PiB7IHJldHVybiBkLngwKzV9KVxuICAgICAgLmF0dHIoXCJ5XCIsIGQgPT4geyByZXR1cm4gZC55MCsyMH0pXG4gICAgICAudGV4dChkID0+IHsgcmV0dXJuIGAke2QuZGF0YS5uYW1lfTogJHtkLmRhdGEudmFsdWV9JWB9KVxuICAgICAgLmF0dHIoXCJmb250LXNpemVcIiwgXCIxNXB4XCIpXG4gICAgICAuYXR0cihcImZpbGxcIiwgXCJ3aGl0ZVwiKVxuICAgICAgLmF0dHIoXCJmb250LWZhbWlseVwiLCBcIidPc3dhbGQnLCBzYW5zLXNlcmlmO1wiKVxuXG59KSJdLCJzb3VyY2VSb290IjoiIn0=